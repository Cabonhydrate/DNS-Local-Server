dns_db.py用于处理和DNS本地数据库有关的逻辑（白名单，黑名单，不在本地数据库）
dns_message.py用于处理和DNS消息有关的逻辑（解析，构造）
dns_relay.py用于处理和DNS中继，转发有关的逻辑（接收，发送）
dns_server.py用于负责协调和管理 DNS 服务器的各个功能模块，处理客户端的 DNS 查询请求，并根据请求的内容和本地配置决定如何响应
main.py是主程序的入口，负责初始化配置，启动 DNS 服务器，并处理命令行参数。

id_conversion_table.txt用来存储域名与内部ID的映射关系

#mobile:
10.29.216.160
#portal:
10.129.52.220

python main.py -d

python main.py -dd

#可以用来测试是否是在使用我们编写的这个本地服务器
nslookup -type=A www.baidu.com
#可以用来测试本地数据库中黑名单的域名
nslookup -type=A ad.example.com
#可以用来测试本地数据库中白名单的域名
nslookup -type=A www.bupt.edu.cn
#可以用来测试需询问上级服务器（本地数据库不存在）的域名
nslookup -type=A www.bilibili.com
#可以测试一个域名同时拥有多个ip地址的情况
nslookup -type=A example.test
#可以测试ipv6的功能
nslookup -type=AAAA www.bilibili.com

现在整个项目的结构完整吗？代码有问题吗？会有哪些方法，哪些类没有用到吗？能成功起到一个DNS本地服务器的功能吗？我该如何运行

wireshark过滤：
1、 ip.addr == 1.1.1.1
2、 udp.port == 53
3、 ip.scr == 0.0.0.0
4、 ip.dst == 0.0.0.0
5、 ip.addr == 10.129.52.220 and udp.port == 53 and dns.qry.name == example.test



nslookup 1.bupt.vip
#结果：1.1.1.1

nslookup 4.bupt.vip
#结果：4.4.4.4

nslookup 6.bupt.vip
#结果：6:6::6:6


nslookup 46.bupt.vip
#结果：4:4::4:4     6.6.6.6

nslookup 44.bupt.vip
#结果：3.3.3.3     2.2.2.2

nslookup 66.bupt.vip
#结果：2:2::2:2    1:1::1:1
